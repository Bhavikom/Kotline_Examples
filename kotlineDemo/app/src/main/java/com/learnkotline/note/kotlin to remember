
1. var and val difference
    "var" is mutable variable in kotlin and can be assigned mulitple time - means its value can be changed in future
    "val" is same as the final modifier in java. As you should probably know that we can not assign to a final variable again but can change its properties-like
    constant variable and known as immutable in kotlin

==================================================================================================================================================================
2. nullable handling - solution to nullpointer exception
    Kotlin has two types of references 1. nullable and 2. non nullable.by default all variable are non null,means kotlin dose not accept null default.
    Thaere is, no variable, by default, can be set to null

    Therefore, this won’t compile:
    val x: Int = null

    If you want a variable to accept nulls, you have to mark the type with a ?:
    val x: Int? = null

    but after assigning val to null compiler will force  you to check the null before doing anything with the variable.This ensures that NullPointerException doesn't occur.
    Ex.. val y = x.toDouble()
    It won’t compile, if you don’t check first if it’s null:

    This will be compile
    if (x != null) {
        val y = x.toDouble()
    }

    Note : safe call operator = ?.
    Note : not-null assertion = !!
    Note : Elvis operator = ?: for condition

    *** The "Elvis" operator = (?:)
    But what if we don’t want to have a nullable variable as a result of the operation? The Elvis operator (?:) allows us to return a value in that case:

    val y = x?.toDouble() ?: 0.0
    This code would be equivalent to:
    val y = if (x != null) {
        x.toDouble()
    } else {
        0.0
    }

    *** when NullPointerException occur in kotlin

        There is an operator (!!) that will avoid the need to check null if you’re completely sure that a variable will never be null.
        there are very few cases where this operator makes sense. There is almost always a better solution.
        But you could do the following:

        val x: Int? = null
        val y = x!!.toDouble()

        This would compile and produce a NullPointerException
        What I said: be very careful with this operator

==================================================================================================================================================================

3. final and open in kotlin :
    by defualt all classes are "final" by default.if you want to extend class declare it as "open" keyword."open is opposite" to "final" in kotlin

==================================================================================================================================================================

3. variable declaration

        To declare a variable in Kotlin, either var or val keyword is used. Here is an example:
        var language = "French"
        val score = 95

        Here, language is a variable of type String, and score is a variable of type Int. You don't have to specify the type of variables;
        Kotlin implicitly does that for you. The compiler knows this by initializer expression ("French" is a String, and 95 is an integer
        value in the above program). This is called type inference in programming

        However, you can explicitly specify the type if you want to:

        var language: String = "French"
        val score: Int = 95

        We have initialized variable during declaration in above examples. However, it's not necessary. You can declare variable and specify its type in one statement,
        and initialize the variable in another statement later in the program

        var language: String      // variable declaration of type String
        ... .. ...
        language = "French"       // variable initialization

        val score: Int          // variable declaration of type Int
        ... .. ...
        score = 95

        Here are few examples that results into error.

        var language           // Error
        language = "French"

==================================================================================================================================================================

6. data types in kotlin
        The built-in types in Kotlin can be categorized as:

        => Numbers
        => Characters
        => Booleans
        => Arrays

            1.Number
            Numbers in Kotlin are similar to Java. There are 6 built-in types representing numbers.

            Byte
            Short
            Int
            Long
            Float
            Double

            2.Char
            To represent a character in Kotlin, Char types are used.
            Unlike Java, Char types cannot be treated as numbers.

            fun main(args : Array<String>) {
                val letter: Char
                letter = 'k'
                println("$letter")
            }
            When you run the program, the output will be:
            k
            In Java, you can do something like:
            char letter = 65;
            However, the following code gives error in Kotlin.
            var letter: Char = 65  // Error

            3.Boolean
            The Boolean data type has two possible values, either true or false.
            Example:
            fun main(args : Array<String>) {

                val flag = true
                println("$flag")
            }
==========================================================================================================================================================

5. Split string in kotlin

        * using Delimiters

        var str = "Kotlin TutorialsepTutorial KartsepExamples"
        var delimiter = "sep"
        val parts = str.split(delimiter)

        * using Multiple Delimiters

        var str = "Kotlin TutorialsepTutorialasepKartsepExamples"
        var delimiter1 = "sep"
        var delimiter2 = "asep"
        val parts = str.split(delimiter1, delimiter2)

        * split using ignorecase

        var str = "Kotlin TutorialsEPTutorialaSEpKartSEpExamples"
        var delimiter1 = "SEP"
        var delimiter2 = "ASEP"
        val parts = str.split(delimiter1, delimiter2, ignoreCase = true)

        * split using Regex
        val str = "Kotlination.com = Be Kotlineer - Be Simple - Be Connective"
        val separate1 = str.split("=|-".toRegex())
        println(separate1)

==================================================================================================================================================================

4. click listener

    textview.setOnClickListener(clickListener)
    val clickListener = View.OnClickListener {view ->
        when (view.getId()) {
            R.id.textview -> firstFun()
            R.id.button -> secondFun()
        }
    }
==================================================================================================================================================================
5. item click listener
====================================================================================================================================================================
6. findviewbyid replacement

    *** private val button: Button by bind(R.id.btn1)
    *** we can use Kotlin extension to replace findViewById
======================================================================================================================
7. with() function to access many property

    with is used to change instance properties without the need to call dot operator over the reference every time.

    ex. = data class Person(var name: String, var tutorial : String)
    var person = Person("Anupam", "Kotlin")

    with(person)
        {
            name = "No Name"
            tutorial = "Kotlin tutorials"
        }


7. use java library and method from kotlin
8. array operation
8. arraylist hashmap operation
8. recyclerview with adapter demo
9. start activity and fragment intent
10. class declaration
11. method declaration

12. kotlin android extension
13. Type conversion
        toByte
        toShort
        toInt
        toLong
        toFloat
        toDouble
        toChar